{"ast":null,"code":"const KEYstr = \"489962d844e3f752951c2f8d442bbb7460668dd305f534be28245b1f122cf5b1\";\nexport async function decrypt({\n  data\n}) {\n  const KEY = hexStringToArrayBuffer(KEYstr);\n  const IV = hexStringToArrayBuffer(data.IV);\n  const encrypted = hexStringToArrayBuffer(data.encrypted + data.TAG);\n  try {\n    // Import the key\n    const importedKey = await window.crypto.subtle.importKey(\"raw\", KEY, \"AES-GCM\", true, [\"decrypt\"]);\n    // Decrypt the data\n    const decodedBuffer = await window.crypto.subtle.decrypt({\n      name: \"AES-GCM\",\n      iv: IV\n    }, importedKey, encrypted);\n\n    // Decode the plaintext\n    const plaintext = new TextDecoder(\"utf8\").decode(decodedBuffer);\n    return plaintext;\n  } catch (error) {\n    throw error; // Rethrow error for handling by caller\n  }\n}\nexport async function encrypt(message) {\n  const KEY = hexStringToArrayBuffer(KEYstr);\n  const IV = crypto.getRandomValues(new Uint8Array(16)); // Generate a random IV\n  const ALGORITHM = \"AES-GCM\";\n\n  // Import the key\n  const cryptoKey = await window.crypto.subtle.importKey(\"raw\", KEY, ALGORITHM, true, [\"encrypt\"]);\n\n  // Encrypt the message\n  const encodedMessage = new TextEncoder().encode(message);\n  const encryptedBuffer = await window.crypto.subtle.encrypt({\n    name: ALGORITHM,\n    iv: IV\n  }, cryptoKey, encodedMessage);\n\n  // Extract the encryption tag\n  const encrypted = arrayBufferToHexString(encryptedBuffer.slice(0, -16)); // Exclude tag\n  const tag = arrayBufferToHexString(encryptedBuffer.slice(-16)); // Extract tag\n\n  return {\n    encrypted,\n    IV: arrayBufferToHexString(IV),\n    TAG: tag\n  };\n}\nexport function hexStringToArrayBuffer(hexString) {\n  hexString = hexString.replace(/^0x/, \"\");\n  if (hexString.length % 2 != 0) {\n    console.log(\"WARNING: expecting an even number of characters in the hexString\");\n  }\n  var bad = hexString.match(/[G-Z\\s]/i);\n  if (bad) {\n    console.log(\"WARNING: found non-hex characters\", bad);\n  }\n  var pairs = hexString.match(/[\\dA-F]{2}/gi);\n  var integers = pairs.map(function (s) {\n    return parseInt(s, 16);\n  });\n  var array = new Uint8Array(integers);\n  return array.buffer;\n}\nexport function arrayBufferToHexString(buffer) {\n  const byteArray = new Uint8Array(buffer);\n  return Array.from(byteArray).map(byte => byte.toString(16).padStart(2, \"0\")).join(\"\");\n}\nexport async function fetchWithEncryption(url, options = {}) {\n  // Encrypt the request body if present\n  if (options.body) {\n    try {\n      const encryptedBody = await encrypt(options.body);\n      options.body = JSON.stringify(encryptedBody);\n    } catch (error) {\n      console.error(\"Encryption failed:\", error);\n      throw new Error(\"Failed to encrypt request\");\n    }\n  }\n\n  // Perform the fetch request\n  const response = await fetch(url, options);\n\n  // Decrypt the response body if present\n  try {\n    const responseData = await response.json();\n    const decryptedData = await decrypt(responseData);\n    return JSON.parse(decryptedData);\n  } catch (error) {\n    console.error(\"Decryption failed:\", error);\n    throw new Error(\"Failed to decrypt response\");\n  }\n}","map":{"version":3,"names":["KEYstr","decrypt","data","KEY","hexStringToArrayBuffer","IV","encrypted","TAG","importedKey","window","crypto","subtle","importKey","decodedBuffer","name","iv","plaintext","TextDecoder","decode","error","encrypt","message","getRandomValues","Uint8Array","ALGORITHM","cryptoKey","encodedMessage","TextEncoder","encode","encryptedBuffer","arrayBufferToHexString","slice","tag","hexString","replace","length","console","log","bad","match","pairs","integers","map","s","parseInt","array","buffer","byteArray","Array","from","byte","toString","padStart","join","fetchWithEncryption","url","options","body","encryptedBody","JSON","stringify","Error","response","fetch","responseData","json","decryptedData","parse"],"sources":["/home/web33/Desktop/Webguru/my projects/aes-gcm-architechture/aes-gcm-encryption/src/helper/commonHelper.js"],"sourcesContent":["const KEYstr =\n  \"489962d844e3f752951c2f8d442bbb7460668dd305f534be28245b1f122cf5b1\";\n\nexport async function decrypt({ data }) {\n  const KEY = hexStringToArrayBuffer(KEYstr);\n  const IV = hexStringToArrayBuffer(data.IV);\n  const encrypted = hexStringToArrayBuffer(data.encrypted + data.TAG);\n\n  try {\n    // Import the key\n    const importedKey = await window.crypto.subtle.importKey(\n      \"raw\",\n      KEY,\n      \"AES-GCM\",\n      true,\n      [\"decrypt\"]\n    );\n    // Decrypt the data\n    const decodedBuffer = await window.crypto.subtle.decrypt(\n      {\n        name: \"AES-GCM\",\n        iv: IV,\n      },\n      importedKey,\n      encrypted\n    );\n\n    // Decode the plaintext\n    const plaintext = new TextDecoder(\"utf8\").decode(decodedBuffer);\n\n    return plaintext;\n  } catch (error) {\n    throw error; // Rethrow error for handling by caller\n  }\n}\n\nexport async function encrypt(message) {\n  const KEY = hexStringToArrayBuffer(KEYstr);\n  const IV = crypto.getRandomValues(new Uint8Array(16)); // Generate a random IV\n  const ALGORITHM = \"AES-GCM\";\n\n  // Import the key\n  const cryptoKey = await window.crypto.subtle.importKey(\n    \"raw\",\n    KEY,\n    ALGORITHM,\n    true,\n    [\"encrypt\"]\n  );\n\n  // Encrypt the message\n  const encodedMessage = new TextEncoder().encode(message);\n  const encryptedBuffer = await window.crypto.subtle.encrypt(\n    {\n      name: ALGORITHM,\n      iv: IV,\n    },\n    cryptoKey,\n    encodedMessage\n  );\n\n  // Extract the encryption tag\n  const encrypted = arrayBufferToHexString(encryptedBuffer.slice(0, -16)); // Exclude tag\n  const tag = arrayBufferToHexString(encryptedBuffer.slice(-16)); // Extract tag\n\n  return {\n    encrypted,\n    IV: arrayBufferToHexString(IV),\n    TAG: tag,\n  };\n}\n\nexport function hexStringToArrayBuffer(hexString) {\n  hexString = hexString.replace(/^0x/, \"\");\n  if (hexString.length % 2 != 0) {\n    console.log(\n      \"WARNING: expecting an even number of characters in the hexString\"\n    );\n  }\n  var bad = hexString.match(/[G-Z\\s]/i);\n  if (bad) {\n    console.log(\"WARNING: found non-hex characters\", bad);\n  }\n  var pairs = hexString.match(/[\\dA-F]{2}/gi);\n  var integers = pairs.map(function (s) {\n    return parseInt(s, 16);\n  });\n  var array = new Uint8Array(integers);\n  return array.buffer;\n}\n\nexport function arrayBufferToHexString(buffer) {\n  const byteArray = new Uint8Array(buffer);\n  return Array.from(byteArray)\n    .map((byte) => byte.toString(16).padStart(2, \"0\"))\n    .join(\"\");\n}\n\nexport async function fetchWithEncryption(url, options = {}) {\n  // Encrypt the request body if present\n  if (options.body) {\n    try {\n      const encryptedBody = await encrypt(options.body);\n      options.body = JSON.stringify(encryptedBody);\n    } catch (error) {\n      console.error(\"Encryption failed:\", error);\n      throw new Error(\"Failed to encrypt request\");\n    }\n  }\n\n  // Perform the fetch request\n  const response = await fetch(url, options);\n\n  // Decrypt the response body if present\n  try {\n    const responseData = await response.json();\n    const decryptedData = await decrypt(responseData);\n    return JSON.parse(decryptedData);\n  } catch (error) {\n    console.error(\"Decryption failed:\", error);\n    throw new Error(\"Failed to decrypt response\");\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}